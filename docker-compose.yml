version: '3'

services:
  # Redis (Cache / Broker / Vector Index / Stream)
  redis:
    container_name: redis
    restart: unless-stopped
    image: redis/redis-stack-server:latest
    ports:
      - 6379:6379
    volumes:
      - ./docker/redis/data:/data

  # Database (MySQL)
  mysql:
    image: mysql:8.2
    container_name: mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
    volumes:
      - ./docker/mysql/:/docker-entrypoint-initdb.d
      
  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    depends_on:
      - mysql
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: password
      MYSQL_PASSWORD: password
      MYSQL_USER: admin

  # n8n (Workflow Automation)
  n8n:
    image: n8nio/n8n
    container_name: n8n
    restart: unless-stopped
    depends_on:
      - mysql
    ports:
      - "5678:5678"
    environment:
      DB_TYPE: mysqldb
      DB_MYSQLDB_DATABASE: n8n
      DB_MYSQLDB_HOST: mysql
      DB_MYSQLDB_PORT: 3306
      DB_MYSQLDB_USER: admin
      DB_MYSQLDB_PASSWORD: password
      N8N_BASIC_AUTH_USER: admin_user
      N8N_BASIC_AUTH_PASSWORD: password
    volumes:
      - ./docker/n8n:/home/node/.n8n

  # SearXNG
  # searxng:
  #   image: searxng/searxng
  #   container_name: searxng
  #   restart: unless-stopped
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - ./docker/searxng:/etc/searxng
  #   environment:
  #     BASE_URL: "http://localhost:8080/"
  #     INSTANCE_NAME: "my-instance"

  # Code Interpreter (Jupyter Notebook / FastAPI)
  # interpreter:
  #   container_name: interpreter
  #   image: promptengineers/interpreter:latest
  #   build: .
  #   restart: always
  #   ports:
  #     - "8888:8888"
  #     - "8000:8000"
  #   environment:
  #     - JUPYTER_ENABLE_LAB=yes
  #     - PYTHONPATH=/home/jovyan
  #   entrypoint: ["sh", "-c", "start-notebook.sh --NotebookApp.token='' & uvicorn api:app --host 0.0.0.0 --port 8000"]
  #   volumes:
  #     - ./docker/interpreter/data:/tmp

  # Minio (File Storage) -- CURRENTLY ALL FILES AND IMAGES ARE BASE64 ENCODED
  # minio:
  #   image: minio/minio
  #   container_name: minio
  #   ports:
  #     - "9000:9000"
  #     - "9001:9001"
  #   environment:
  #     MINIO_ROOT_USER: CHANGEME
  #     MINIO_ROOT_PASSWORD: CHANGEME
  #   volumes:
  #     - ~/minio/data:/data
  #     - ~/minio/config:/root/.minio
  #   command: server /data --console-address ":9001"

  # # API
  # api:
  #   container_name: api
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   # volumes:
  #   #   - ./backend/data:/app/data  # Mount for SQLite database to host directory
  #   ports:
  #     - 8000:8000
  #   env_file:
  #     - ./backend/.env

  # # Proxy (Nginx)
  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   volumes:
  #     - ./docker/nginx:/etc/nginx/conf.d
  #   ports:
  #     - 80:80
  #     - 443:443
  #   depends_on:
  #     - api

  # OpenAI Whisper ASR Service
  # https://github.com/ahmetoner/whisper-asr-webservice/
  # whisper_asr:
  #   image: onerahmet/openai-whisper-asr-webservice:latest-gpu
  #   container_name: whisper_asr
  #   ports:
  #     - 9000:9000
  #   environment:
  #     ASR_MODEL: base
  #     ASR_ENGINE: openai_whisper
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - capabilities: [gpu]

  # Ollama (AI Service)
  # ollama:
  #   container_name: ollama
  #   image: ollama/ollama
  #   volumes:
  #     - ./docker/ollama:/ollama  # Mount the directory containing entrypoint.sh
  #   ports:
  #     - 11434:11434
  #   entrypoint: ["/ollama/entrypoint.sh"]  # Specify the entrypoint script
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - capabilities: [gpu]
